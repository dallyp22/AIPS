// This is your Prisma schema file for PRODUCTION
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Plant {
  id          Int          @id @default(autoincrement())
  name        String
  tenantId    String       @default("default")
  departments Department[]
  holidays    Holiday[]
  workcenters Workcenter[]

  @@index([tenantId])
}

model Department {
  id          Int          @id @default(autoincrement())
  plantId     Int
  name        String
  tenantId    String       @default("default")
  plant       Plant        @relation(fields: [plantId], references: [id])
  operators   Operator[]
  workcenters Workcenter[]

  @@index([tenantId])
}

model Workcenter {
  id                Int                @id @default(autoincrement())
  plantId           Int
  departmentId      Int
  workcenterNo      String
  name              String
  displayTitle      String?
  defaultSchemeId   Int?
  minStaff          Int                @default(0)
  gatingRules       String?
  changeoverFamily  String?
  tenantId          String             @default("default")
  changeovers       Changeover[]
  orders            Order[]
  scheduleBlocks    ScheduleBlock[]
  shiftAssignments  ShiftAssignment[]
  skillRequirements SkillRequirement[]
  department        Department         @relation(fields: [departmentId], references: [id])
  plant             Plant              @relation(fields: [plantId], references: [id])

  @@unique([plantId, workcenterNo])
  @@index([tenantId])
}

model Holiday {
  id      Int      @id @default(autoincrement())
  plantId Int
  date    DateTime
  name    String
  plant   Plant    @relation(fields: [plantId], references: [id])
}

model SKU {
  id                   Int       @id @default(autoincrement())
  skuNo                String    @unique
  name                 String
  description          String?
  family               String?
  unitsOfMeasure       String    @default("EA")
  defaultQuantity      Int       @default(1)
  baseProcessingTime   Float?
  setupTime            Float     @default(0)
  idealCycleTime       Float?
  rushMultiplier       Float     @default(1.2)
  colorCode            String?
  isActive             Boolean   @default(true)
  createdAt            DateTime  @default(now())
  orders               Order[]
  products             Product[]
}

model Product {
  id               Int      @id @default(autoincrement())
  skuId            Int
  bomVersion       String   @default("1.0")
  yield            Float    @default(1.0)
  scrapRate        Float    @default(0.02)
  qualityStandard  String?
  packagingType    String?
  shelfLife        Int?
  storageCondition String?
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  sku              SKU      @relation(fields: [skuId], references: [id])

  @@unique([skuId, bomVersion])
}

model Order {
  id             Int             @id @default(autoincrement())
  orderNo        String          @unique
  skuId          Int
  workcenterId   Int
  quantity       Int
  priority       Int             @default(5)
  dueDate        DateTime
  startDate      DateTime?
  isRush         Boolean         @default(false)
  performanceLever Float?
  colorOverride  String?
  sku            SKU             @relation(fields: [skuId], references: [id])
  scheduleBlocks ScheduleBlock[]
  workcenter     Workcenter      @relation(fields: [workcenterId], references: [id])
}

model ScheduleBlock {
  id                  Int          @id @default(autoincrement())
  orderId             Int
  workcenterId        Int
  startTime           DateTime
  endTime             DateTime
  actualStartTime     DateTime?
  actualEndTime       DateTime?
  scheduledUnits      Int
  actualUnits         Int?
  laborMinutesPlanned Int?
  laborMinutesActual  Int?
  status              String       @default("Planned")
  notes               String?
  createdAt           DateTime     @default(now())
  fromChangeovers     Changeover[] @relation("FromBlock")
  order               Order        @relation(fields: [orderId], references: [id])
  toChangeovers       Changeover[] @relation("ToBlock")
  workcenter          Workcenter   @relation(fields: [workcenterId], references: [id])
}

model Changeover {
  id            Int           @id @default(autoincrement())
  workcenterId  Int
  fromBlockId   Int?
  toBlockId     Int
  estimatedTime Int
  actualTime    Int?
  status        String        @default("Planned")
  notes         String?
  createdAt     DateTime      @default(now())
  toBlock       ScheduleBlock @relation("ToBlock", fields: [toBlockId], references: [id])
  fromBlock     ScheduleBlock? @relation("FromBlock", fields: [fromBlockId], references: [id])
  workcenter    Workcenter    @relation(fields: [workcenterId], references: [id])
}

model Operator {
  id               Int                  @id @default(autoincrement())
  employeeId       String               @unique
  firstName        String
  lastName         String
  email            String?
  phone            String?
  hireDate         DateTime
  departmentId     Int?
  isActive         Boolean              @default(true)
  basePayRate      Float?
  emergencyContact String?
  tenantId         String               @default("default")
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  department       Department?          @relation(fields: [departmentId], references: [id])
  competencies     OperatorCompetency[]
  shiftAssignments ShiftAssignment[]

  @@index([tenantId])
}

model Skill {
  id                Int                  @id @default(autoincrement())
  code              String               @unique
  name              String
  description       String?
  category          String
  isCore            Boolean              @default(false)
  isCertification   Boolean              @default(false)
  expiryMonths      Int?
  createdAt         DateTime             @default(now())
  competencies      OperatorCompetency[]
  skillRequirements SkillRequirement[]
}

model OperatorCompetency {
  id          Int       @id @default(autoincrement())
  operatorId  Int
  skillId     Int
  level       Int
  certifiedAt DateTime?
  expiresAt   DateTime?
  certifiedBy String?
  notes       String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  skill       Skill     @relation(fields: [skillId], references: [id])
  operator    Operator  @relation(fields: [operatorId], references: [id])

  @@unique([operatorId, skillId])
}

model SkillRequirement {
  id           Int        @id @default(autoincrement())
  workcenterId Int
  skillId      Int
  requiredLevel Int       @default(1)
  isRequired   Boolean   @default(true)
  createdAt    DateTime  @default(now())
  skill        Skill     @relation(fields: [skillId], references: [id])
  workcenter   Workcenter @relation(fields: [workcenterId], references: [id])

  @@unique([workcenterId, skillId])
}

model ShiftPattern {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  description      String?
  startTime        String
  endTime          String
  daysOfWeek       String
  totalHours       Float
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  shiftAssignments ShiftAssignment[]
}

model ShiftAssignment {
  id             Int          @id @default(autoincrement())
  operatorId     Int
  workcenterId   Int
  shiftPatternId Int
  startDate      DateTime
  endDate        DateTime?
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  operator       Operator     @relation(fields: [operatorId], references: [id])
  shiftPattern   ShiftPattern @relation(fields: [shiftPatternId], references: [id])
  workcenter     Workcenter   @relation(fields: [workcenterId], references: [id])

  @@unique([operatorId, workcenterId, startDate])
}
