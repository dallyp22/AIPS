
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.PlantScalarFieldEnum = {
  id: 'id',
  name: 'name',
  tenantId: 'tenantId'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  plantId: 'plantId',
  name: 'name',
  tenantId: 'tenantId'
};

exports.Prisma.WorkcenterScalarFieldEnum = {
  id: 'id',
  plantId: 'plantId',
  departmentId: 'departmentId',
  workcenterNo: 'workcenterNo',
  name: 'name',
  displayTitle: 'displayTitle',
  defaultSchemeId: 'defaultSchemeId',
  minStaff: 'minStaff',
  gatingRules: 'gatingRules',
  changeoverFamily: 'changeoverFamily',
  tenantId: 'tenantId'
};

exports.Prisma.HolidayScalarFieldEnum = {
  id: 'id',
  plantId: 'plantId',
  date: 'date',
  label: 'label'
};

exports.Prisma.SKUScalarFieldEnum = {
  id: 'id',
  code: 'code',
  family: 'family',
  familyColorHex: 'familyColorHex',
  formula: 'formula',
  bottleSize: 'bottleSize',
  caseSize: 'caseSize'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  skuId: 'skuId'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  orderNo: 'orderNo',
  skuId: 'skuId',
  qty: 'qty',
  runRateUph: 'runRateUph',
  performanceLeverPct: 'performanceLeverPct',
  priority: 'priority',
  dueAt: 'dueAt',
  workcenterId: 'workcenterId',
  shopfloorTitle: 'shopfloorTitle',
  colorHex: 'colorHex'
};

exports.Prisma.ScheduleBlockScalarFieldEnum = {
  id: 'id',
  workcenterId: 'workcenterId',
  orderId: 'orderId',
  startAt: 'startAt',
  endAt: 'endAt'
};

exports.Prisma.ChangeoverScalarFieldEnum = {
  id: 'id',
  workcenterId: 'workcenterId',
  fromBlockId: 'fromBlockId',
  toBlockId: 'toBlockId',
  typeCode: 'typeCode',
  plannedMinutes: 'plannedMinutes',
  includeInOee: 'includeInOee',
  complexityTier: 'complexityTier'
};

exports.Prisma.OperatorScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  hireDate: 'hireDate',
  departmentId: 'departmentId',
  isActive: 'isActive',
  basePayRate: 'basePayRate',
  emergencyContact: 'emergencyContact',
  tenantId: 'tenantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SkillScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  description: 'description',
  category: 'category',
  isCore: 'isCore',
  isCertification: 'isCertification',
  expiryMonths: 'expiryMonths',
  createdAt: 'createdAt'
};

exports.Prisma.OperatorCompetencyScalarFieldEnum = {
  id: 'id',
  operatorId: 'operatorId',
  skillId: 'skillId',
  level: 'level',
  certifiedAt: 'certifiedAt',
  expiresAt: 'expiresAt',
  certifiedBy: 'certifiedBy',
  notes: 'notes',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SkillRequirementScalarFieldEnum = {
  id: 'id',
  workcenterId: 'workcenterId',
  skillId: 'skillId',
  minLevel: 'minLevel',
  isRequired: 'isRequired',
  shiftType: 'shiftType',
  createdAt: 'createdAt'
};

exports.Prisma.ShiftPatternScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  startTime: 'startTime',
  endTime: 'endTime',
  hoursPerShift: 'hoursPerShift',
  daysPattern: 'daysPattern',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.ShiftAssignmentScalarFieldEnum = {
  id: 'id',
  operatorId: 'operatorId',
  workcenterId: 'workcenterId',
  shiftPatternId: 'shiftPatternId',
  startDate: 'startDate',
  endDate: 'endDate',
  isActive: 'isActive',
  role: 'role',
  payRate: 'payRate',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Plant: 'Plant',
  Department: 'Department',
  Workcenter: 'Workcenter',
  Holiday: 'Holiday',
  SKU: 'SKU',
  Product: 'Product',
  Order: 'Order',
  ScheduleBlock: 'ScheduleBlock',
  Changeover: 'Changeover',
  Operator: 'Operator',
  Skill: 'Skill',
  OperatorCompetency: 'OperatorCompetency',
  SkillRequirement: 'SkillRequirement',
  ShiftPattern: 'ShiftPattern',
  ShiftAssignment: 'ShiftAssignment'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
